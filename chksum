#!/usr/bin/env bash
#
# /usr/local/xbin/chksum
#
#
# Description:
#   Script to check/verify checksums, or to create
#   checksum files (eg fooBar.txt.sha256).
#

ERR=0;

_version='1.99-20230828';
_copy='Copyright (c) 2023, Eric F';


# Check for openssl
[[ ! `type openssl 2>/dev/null` ]] && \
    echo -e ":: OpenSSL is not installed.\n:: Aborting...\n" && exit 1;


# Help/information
function __helper() {
    cat << HELP
${_base}: ${_version}
${_copy}

Description:
    ${_base} is a script to verify checksums against files. It can also be used
    to create checksum files (eg /path/to/file.txt.rmd160).

    Since SHA1 is broken/shattered, you can only use it to read/verify
    files, in case you have old files using that. MD5 or SHA1 will not
    be used when creating checksums.

Usage:
    Verifying:
        ${_base} <mode <checksum> <file>

    Creating checksum files:
        ${_base} -a <files>
        ${_base} -o <mode> <files>
        ${_base} -b <mode> <files>

        ${_base} [-h|-hl|-V]

    Modes:
        md5|sha[1|224|256|384|512]|r[ipe]md160|whirlpool
        [!] When creating checksum files... MD5 or SHA[1] are not accepted.

    Options:
        -a, --auto        Will create 2 files of each input (rmd160 + sha256)
        -o, --out         Will create a checksum file of each input: <file>.<mode>
        -b, --batch-out   Will create the file CHECKSUMS.<mode> of all inputs
        -h, --help        Print out this information.
        -hl, --helpless   Print out this information using "| less".
        -V, --version     Print out the version number.

Examples:
    ${_base} md5 d41d8cd98f00b204e9800998ecf8427e foo.bar
    ${_base} sha da39a3ee5e6b4b0d3255bfef95601890afd80709 foo.bar
    ${_base} sha256 e3b0c44298fc1c149afbf4c89...truncated foo.bar

    ${_base} -a foo.bar
    ${_base} -o rmd160 foo.bar
    ${_base} -b foo_0{1..5}.bar

HELP
}


# Oops...
function __err() {
    cat <<OUT
/**
 * Usage:
 *
 *   Verifying:
 *     ${_base} <mode> <checksum> <file>
 *
 *   Creating checksum files:
 *     ${_base} -a <files>
 *     ${_base} -o <mode> <files>
 *     ${_base} -b <mode> <files>
 *
 *   ${_base} [ -h | -hl | -V ]
 */

OUT

ERR=1
}


# Check...
function __dgst() {
    if [ -z $_sum ] || [ -z $_file ]; then
        echo -e "${_cyan}${_base}${_def}: WARNING: Missing checksum &/or filename.";
        return 1;
    fi

    # Default 'sha' to 'sha1'
    [[ $_mode == 'sha' ]] && _mode='sha1';

    _chksum=$(openssl dgst -${_mode} -r ${_file} | awk '{ print $1 }');

    # Verify and output
    if [[ ${_sum} == ${_chksum} ]]; then
        echo -e "${_file}:\t\t...${_green} OK${_def}";
    else
        echo -e "${_file}:\t\t...${_red} FAILED${_def}";
        echo -e "\n${_cyan}${_base}${_def}: WARNING: The checksum (${_red}${_sum}${_def}) did NOT match\n";
        ERR=1;
    fi
}


# Create checksum file (eg fooBar.txt.sha256).
function __mkdgst() {
    _opt=${1} && shift 1;
    [[ ! ${_opt} =~ -a|--auto ]] && _mode=${1} && shift 1;

    # Don't use md5 or sha1 when creating checksums
    if [[ ${_opt} =~ -a|--auto ]] || [[ ${_mode} =~ sha224|sha256|sha384|sha512|rmd|ripemd160|whirlpool ]]; then
        _files="$@";

        if [[ ${_opt} =~ -b|--batch-out ]] && [ -f $(echo `dirname "${1}"`)/CHECKSUMS.${_mode} ]; then
            echo -e "${_cyan}${_base}${_def}: Creating backup...";
            mv -v $(echo `dirname "${1}"`)/CHECKSUMS.${_mode}{,.bak};
        fi

        for file in ${_files[@]}; do
            [[ ${_opt} =~ -b|--batch-out ]] && _out=$(echo `dirname "${1}"`)/CHECKSUMS || _out="${file}";

            # Example: openssl dgst -rmd160 -r -out "file.txt"{.rmd160,};
            if [[ ${_opt} =~ -a|--auto ]]; then
                openssl dgst -rmd160 -r -out "${file}"{.rmd160,};
                openssl dgst -sha256 -r -out "${file}"{.sha256,};
            elif [[ ${_opt} =~ -b|--batch-out ]]; then
                openssl dgst -${_mode} -r  "${file}" >> "${_out}.${_mode}";
            else
                openssl dgst -${_mode} -r -out "${file}"{.${_mode},};
            fi
        done
    elif [[ ${_mode} =~ ^md5$|^sha$|^sha1$ ]]; then
        echo -e "${_cyan}${_base}${_def}: MD5 or SHA1 are not accepted. Aborting...";
        __err;
    fi
    ERR=$?
}


# Vars
_base=$(basename ${0});
_mode="${1}";
_sum="${2}";
_file="${3}";

# Colors
_cyan="\e[0;36m";     # cyan = cyan normal color
_green="\e[0;32m";    # green = green color
_red="\e[0;31m";      # red = red color
_def="\e[0m";         # _def = empty color (eg reset)


# Let's go...
case ${_mode} in
    # Verify checksum
    md5|sha|sha1|sha224|sha256|sha384|sha512|rmd160|ripmd160|whirlpool)
        __dgst "$@";
        ;;

    # Creating checksum files
    -a|--auto|-o|--out|-b|--batch-out)
        __mkdgst "$@";
        ;;

    # Version/information
    -V|--version)
        echo -e "${_base}: version ${_version}\n${_copy}";
        ;;

    # Help(less)
    -h|--help)      __helper;           ;;
    -hl|--helpless) __helper | less;    ;;
    *)              __err;              ;;
esac

exit ${ERR};
